# -*- coding: utf-8 -*-
"""bonus_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Syh_bpDQ2tuoa9CrGhfAIHQP1ReV4AXn
"""

import pandas as pd
import numpy as np
df=pd.read_csv('/content/drive/MyDrive/files for prml/bitcoin_price_bitcoin_price.2013Apr-2017Aug (1).csv')
df

df['Date']=pd.to_datetime(df['Date'])
df['year']=df['Date'].dt.year
df['month']=df['Date'].dt.month
df['day']=df['Date'].dt.day
df=df.dropna(axis=1)
print(df)

data=df.drop(labels='Date',axis=1)
#print(df)
target=df['Close']
#print(target)

"""**VISUALIZATION**

**SPLITING DATA INTO TRAIN AND TEST**
"""

from sklearn.model_selection  import train_test_split
Y = target
X = data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

X_train=X_train.values
Y_train=Y_train.values
X_test=X_test.values
Y_test=Y_test.values

import matplotlib.pyplot as plt
#plt.figure(figsize=(10, 7))
format='o'
plt.plot(df['High'],Y, format)
format='.'
plt.plot(df['High'],Y, format)
plt.xlabel("HIGH")
plt.ylabel("PRICE")
plt.grid(True)

format='o'
plt.plot(df['Open'],Y, format)
format='.'
plt.plot(df['Open'],Y, format)
plt.xlabel("Open")
plt.ylabel("PRICE")
plt.grid(True)

format='o'
plt.plot(df['Low'],Y, format)
format='.'
plt.plot(df['Low'],Y, format)
plt.xlabel("Low")
plt.ylabel("PRICE")
plt.grid(True)

format='o'
plt.plot(df['Volume'],Y, format)
format='.'
plt.plot(df['Volume'],Y, format)
plt.xlabel("Volume")
plt.ylabel("PRICE")
plt.grid(True)

format='o'
plt.plot(df['Market Cap'],Y, format)
format='.'
plt.plot(df['Market Cap'],Y, format)
plt.xlabel("Market Cap")
plt.ylabel("PRICE")
plt.grid(True)

import seaborn as sns
data_set=df.copy()
sns.jointplot(data_set['Open'],data_set['Close'],kind='kde')
sns.jointplot(data_set['High'],data_set['Close'],kind='kde')
sns.jointplot(data_set['Low'],data_set['Close'],kind='kde')
#sns.jointplot(data_set['Date'],data_set['Close'],kind='kde')

sns.distplot(df['Close']);

df.dtypes

"""**applying different models**

**1. linear regression**
"""

from sklearn.linear_model import LinearRegression
reg = LinearRegression().fit(X_train, Y_train)
reg.score(X_test,Y_test)    # r-2 score

"""**2.DECISION TREE REGRESSOR WITH CROSS VALIDATION**"""

from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeRegressor
dtr = DecisionTreeRegressor(random_state=42)

print(cross_val_score(dtr, X_train, Y_train, cv=10),'\n')
print(cross_val_score(dtr, X_test, Y_test, cv=10))

"""**3.RANDOM FOREST REGRESSOR**"""

from sklearn.ensemble import RandomForestRegressor
regr = RandomForestRegressor(max_depth=5, random_state=0,oob_score=True)
regr.fit(X_train, Y_train) #training the model
regr.predict(X_test)
print(regr.oob_score_)  # out of bag score

"""**BAGGING REGRESSOR**"""

from sklearn.svm import SVR
from sklearn.ensemble import BaggingRegressor
br = BaggingRegressor(n_estimators=10, random_state=0,oob_score=True).fit(X_train,Y_train)
br.predict(X_test)
print(br.oob_score_)